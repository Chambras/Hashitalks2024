name: "Terraform"

on:
  push:
    paths-ignore:
      - ".devcontainer/**"
      - "**/*.md"
    branches:
      - main
  pull_request:
  workflow_dispatch:

env:
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_ENVIRONMENT: "public"
  TF_IN_AUTOMATION: 1
  PBLC_VM_SSH: ${{secrets.PBLC_VM_SSH}}
  PRVT_VM_SSH: ${{secrets.PRVT_VM_SSH}}
  TFMSPASSWORD: ${{secrets.TFMSPASSWORD}}
  STDDSPASSWORD: ${{secrets.STDDSPASSWORD}}
  TBFMPASSWORD: ${{secrets.TBFMPASSWORD}}

jobs:
  codeAnalysisInfrastructure:
    name: Code Analysis Infrastructure
    uses: chambras/workflows/.github/workflows/staticCodeAnalysis.yml@main
    with:
      project-folder: Infrastructure/terraform-azure/

  codeAnalysisDatabricks:
    name: Code Analysis Databricks
    uses: chambras/workflows/.github/workflows/staticCodeAnalysis.yml@main
    with:
      project-folder: Infrastructure/terraform-databricks/

  infrastructure:
    needs: [codeAnalysisInfrastructure]
    name: "Azure Infrastructure"
    runs-on: ubuntu-latest
    environment: "Prod"

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    # Checkout the repository to the GitHub Actions runner
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create SSH key
        run: |
          mkdir -p ~/.ssh/
          echo "$PBLC_VM_SSH" > ~/.ssh/vm_ssh.pub
          sudo chmod 400 ~/.ssh/vm_ssh.pub
          echo "$PRVT_VM_SSH" > ~/.ssh/vm_ssh
          sudo chmod 400 ~/.ssh/vm_ssh
        shell: bash

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.2
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: Infrastructure/terraform-azure/

      # Validate Terraform Script
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: Infrastructure/terraform-azure/

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        working-directory: Infrastructure/terraform-azure/

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        working-directory: Infrastructure/terraform-azure/

      - name: Saving Plan
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`${process.env.PLAN}\`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

        # On push to master, build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        env:
          ANSIBLE_HOST_KEY_CHECKING: False
        run: terraform apply -auto-approve
        working-directory: Infrastructure/terraform-azure/

  databricks:
    name: "Azure-Databricks"
    needs: [infrastructure, codeAnalysisDatabricks]
    runs-on: ubuntu-latest
    environment: "Prod"

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    # Checkout the repository to the GitHub Actions runner
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.2
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: Infrastructure/terraform-databricks/

      # Validate Terraform Script
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: Infrastructure/terraform-databricks/

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        working-directory: Infrastructure/terraform-databricks/

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        id: plan
        # if: needs.infrastructure.outputs.dbwsid != ''
        run: terraform plan -no-color
        working-directory: Infrastructure/terraform-databricks/

      - name: Saving Plan
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`${process.env.PLAN}\`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

        # On push to master, build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
        working-directory: Infrastructure/terraform-databricks/
